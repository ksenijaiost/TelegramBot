package tg_bot.functions;

import lombok.AllArgsConstructor;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import tg_bot.KeywordBot;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.*;

import static tg_bot.constants.BotEnv.CONTEST_CHAT_ID;

@AllArgsConstructor
public class ContestManager {
    private final KeywordBot bot;
    private LocalDate contestStartDate;
    private LocalDate contestEndDate;
    private int workCounter = 1;
    private Set<Long> judges = new HashSet<>();
    private Set<Long> participants = new HashSet<>();
    private Map<Long, String> judgeCodes = new HashMap<>();
    private Map<Long, Set<Long>> selectedJudges = new HashMap<>();
    private Map<Long, Boolean> waitingForGoogleFormLink = new HashMap<>();
    private String contestTheme = "–¢–µ–º–∞ –∫–æ–Ω–∫—É—Ä—Å–∞";
    private String contestAnnouncementLink = "https://example.com/announcement";
    private String contestRulesLink = "https://example.com/rules";

    public void handleContestCommand(long chatId, String text, Message message) {
        switch (text) {
            case "–ö–æ–Ω–∫—É—Ä—Å":
                sendContestMenu(chatId);
                break;
            case "–£–∑–Ω–∞—Ç—å –ø—Ä–æ –∫–æ–Ω–∫—É—Ä—Å":
                sendContestInfo(chatId);
                break;
            case "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å":
                handleContestSubmission(chatId);
                break;
            case "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—É–¥–µ–π—Å—Ç–≤–æ":
                handleJudgeRegistration(chatId);
                break;
            case "–°–æ–≥–ª–∞—Å–µ–Ω":
                confirmJudgeRegistration(chatId);
                break;
            case "–û—Ç–º–µ–Ω–∏—Ç—å —Å—É–¥–µ–π—Å—Ç–≤–æ":
                cancelJudgeRegistration(chatId);
                break;
        }
    }

    private void handleContestSubmission(long chatId) {
        if (isContestActive()) {
            BotUtils.sendMessage(chatId, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã.", bot);
        } else {
            BotUtils.sendMessage(chatId, "–ü—Ä–∏—ë–º —Ä–∞–±–æ—Ç –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å –∑–∞–∫—Ä—ã—Ç. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏!", bot);
        }
    }

    public void handleContestWorkSubmission(Message message) {
        long chatId = message.getChatId();

        if (isContestActive()) {
            StringBuilder contestMessage = new StringBuilder();
            contestMessage.append("–†–∞–±–æ—Ç–∞ #").append(workCounter).append("\n");
            contestMessage.append("–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @").append(message.getFrom().getUserName()).append("\n");
            contestMessage.append("–¢–µ–∫—Å—Ç: ").append(message.getCaption()).append("\n");

            try {
                for (int i = 0; i < Math.min(message.getPhoto().size(), 10); i++) {
                    String fileId = message.getPhoto().get(i).getFileId();
                    InputFile photo = new InputFile(fileId);
                    bot.execute(new SendPhoto(CONTEST_CHAT_ID, photo));
                }
                bot.execute(new SendMessage(CONTEST_CHAT_ID, contestMessage.toString()));
            } catch (TelegramApiException e) {
                BotUtils.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞–±–æ—Ç—ã: " + e.getMessage());
            }

            BotUtils.sendMessage(chatId, "–í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–æ–º–µ—Ä —Ä–∞–±–æ—Ç—ã: #" + workCounter, bot);
            workCounter++;
        } else {
            BotUtils.sendMessage(chatId, "–ü—Ä–∏—ë–º —Ä–∞–±–æ—Ç –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å –∑–∞–∫—Ä—ã—Ç. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏!", bot);
        }
    }

    public void handleDefaultMessage(long chatId, String text) {
        if (text.equalsIgnoreCase("–Ω–∞–∑–∞–¥")) {
            sendMainMenu(chatId);
        } else if (text.matches("\\d{2}\\.\\d{2}\\.\\d{4} \\d{2}\\.\\d{2}\\.\\d{4}")) {
            if (BotUtils.isAdmin(chatId)) {
                String[] dates = text.split(" ");
                setContestPeriod(dates[0], dates[1], chatId);
            } else {
                BotUtils.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", bot);
            }
        } else if (waitingForGoogleFormLink.getOrDefault(chatId, false)) {
            handleGoogleFormLink(chatId, text);
        } else {
            String response = getResponseByKeyword(text);
            BotUtils.sendMessage(chatId, response, bot);
        }
    }

    public void handleCallbackQuery(CallbackQuery callbackQuery) {
        long chatId = callbackQuery.getMessage().getChatId();
        String callbackData = callbackQuery.getData();

        if (callbackData.startsWith("select_judge_")) {
            long judgeId = Long.parseLong(callbackData.replace("select_judge_", ""));
            selectJudge(chatId, judgeId);
        } else if (callbackData.startsWith("unselect_judge_")) {
            long judgeId = Long.parseLong(callbackData.replace("unselect_judge_", ""));
            unselectJudge(chatId, judgeId);
        } else if (callbackData.equals("confirm_broadcast")) {
            confirmBroadcast(chatId);
        } else if (callbackData.equals("back_to_judge_selection")) {
            showJudgeSelection(chatId);
        }
    }

    private void sendContestMenu(long chatId) {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–£–∑–Ω–∞—Ç—å –ø—Ä–æ –∫–æ–Ω–∫—É—Ä—Å");
        row1.add("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—É–¥–µ–π—Å—Ç–≤–æ");
        row2.add("–ù–∞–∑–∞–¥");

        keyboard.add(row1);
        keyboard.add(row2);

        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–ú–µ–Ω—é –∫–æ–Ω–∫—É—Ä—Å–∞:");
        message.setReplyMarkup(keyboardMarkup);

        try {
            bot.execute(message);
        } catch (TelegramApiException e) {
            BotUtils.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é –∫–æ–Ω–∫—É—Ä—Å–∞: " + e.getMessage());
        }
    }

    private void sendContestInfo(long chatId) {
        String contestInfo = String.format(
                "üéâ *–¢–µ–º–∞ –∫–æ–Ω–∫—É—Ä—Å–∞*: %s\n" +
                        "üìÖ *–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è*: —Å %s –ø–æ %s\n" +
                        "üîó *–ê–Ω–æ–Ω—Å*: %s\n" +
                        "üìú *–ü—Ä–∞–≤–∏–ª–∞*: %s",
                contestTheme, contestStartDate, contestEndDate, contestAnnouncementLink, contestRulesLink
        );

        BotUtils.sendMessage(chatId, contestInfo, bot);
    }

    private void handleJudgeRegistration(long chatId) {
        if (participants.contains(chatId)) {
            BotUtils.sendMessage(chatId, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å—É–¥–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ.", bot);
            sendContestMenu(chatId);
        } else if (judges.contains(chatId)) {
            BotUtils.sendMessage(chatId, "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å—É–¥–µ–π—Å—Ç–≤–æ.", bot);
            sendContestMenu(chatId);
        } else {
            ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
            List<KeyboardRow> keyboard = new ArrayList<>();

            KeyboardRow row1 = new KeyboardRow();
            row1.add("–°–æ–≥–ª–∞—Å–µ–Ω");
            row1.add("–ù–∞–∑–∞–¥ –∫ –∫–æ–Ω–∫—É—Ä—Å–∞–º");
            row1.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

            keyboard.add(row1);

            keyboardMarkup.setKeyboard(keyboard);
            keyboardMarkup.setResizeKeyboard(true);

            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId));
            message.setText("–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å—Ç–∞—Ç—å —Å—É–¥—å—ë–π?");
            message.setReplyMarkup(keyboardMarkup);

            try {
                bot.execute(message);
            } catch (TelegramApiException e) {
                BotUtils.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
            }
        }
    }

    private void confirmJudgeRegistration(long chatId) {
        judges.add(chatId);
        BotUtils.sendMessage(chatId, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å—É–¥–µ–π—Å—Ç–≤–æ!", bot);
        BotUtils.notifyAdmin("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + chatId + " –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å—É–¥–µ–π—Å—Ç–≤–æ.", bot);
        sendContestMenu(chatId);
    }

    private void cancelJudgeRegistration(long chatId) {
        judges.remove(chatId);
        BotUtils.sendMessage(chatId, "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ —Å—É–¥–µ–π—Å—Ç–≤–æ.", bot);
        sendContestMenu(chatId);
    }

    private void showJudgeSelection(long chatId) {
        if (judges.isEmpty()) {
            BotUtils.sendMessage(chatId, "–ù–µ—Ç –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è —Å—É–¥–µ–π.", bot);
            return;
        }

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        for (Long judge : judges) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            if (selectedJudges.getOrDefault(chatId, new HashSet<>()).contains(judge)) {
                button.setText("‚ùå –°—É–¥—å—è " + judge);
                button.setCallbackData("unselect_judge_" + judge);
            } else {
                button.setText("‚úÖ –°—É–¥—å—è " + judge);
                button.setCallbackData("select_judge_" + judge);
            }
            keyboard.add(Collections.singletonList(button));
        }

        InlineKeyboardButton confirmButton = new InlineKeyboardButton();
        confirmButton.setText("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä");
        confirmButton.setCallbackData("confirm_broadcast");

        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É");
        backButton.setCallbackData("back_to_judge_selection");

        keyboard.add(Collections.singletonList(confirmButton));
        keyboard.add(Collections.singletonList(backButton));

        keyboardMarkup.setKeyboard(keyboard);

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–¥–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:");
        message.setReplyMarkup(keyboardMarkup);

        try {
            bot.execute(message);
        } catch (TelegramApiException e) {
            BotUtils.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    private void selectJudge(long chatId, long judgeId) {
        selectedJudges.computeIfAbsent(chatId, k -> new HashSet<>()).add(judgeId);
        showJudgeSelection(chatId);
    }

    private void unselectJudge(long chatId, long judgeId) {
        selectedJudges.computeIfAbsent(chatId, k -> new HashSet<>()).remove(judgeId);
        showJudgeSelection(chatId);
    }

    private void confirmBroadcast(long chatId) {
        Set<Long> selected = selectedJudges.get(chatId);
        if (selected == null || selected.isEmpty()) {
            BotUtils.sendMessage(chatId, "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—É–¥—å–∏.", bot);
            return;
        }

        BotUtils.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google Forms:", bot);
        waitingForGoogleFormLink.put(chatId, true);
    }

    private void handleGoogleFormLink(long chatId, String text) {
        String googleFormLink = text;

        for (Long judge : selectedJudges.get(chatId)) {
            String code = UUID.randomUUID().toString();
            judgeCodes.put(judge, code);
        }

        for (Long judge : selectedJudges.get(chatId)) {
            String messageText = String.format(
                    "–ü—Ä–∏–≤–µ—Ç! –ú—ã —Ä–µ—à–∏–ª–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–µ–±–æ–ª—å—à–æ–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –≤ —Å—É–¥–µ–π—Å—Ç–≤–µ –∫–æ–Ω–∫—É—Ä—Å–æ–≤: –º—ã –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, —Ç–æ–∂–µ –ø–æ—Å—É–¥–∏—Ç—å!\n" +
                            "–ü–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –∫—Ä—É—Ç—ã–º —Å—É–¥—å—ë–π –∏ —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ –ø–æ–±–µ–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–æ–∂–Ω–æ —Ç—É—Ç: %s\n" +
                            "–í–ù–ò–ú–ê–ù–ò–ï!\n" +
                            "1) –ù–µ –∑–∞–±—É–¥—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü–µ\n" +
                            "2) –í –æ–¥–Ω–æ–º –∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–∏—Ç—å –∫–æ–¥, –æ–Ω –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∏ –Ω—É–∂–µ–Ω –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç \"–ª–µ–≤—ã—Ö\" —Å—É–¥–µ–π (–µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –ø–æ–ø–∞–ª–∞ –∫ —Ç–æ–º—É, –∫ –∫–æ–º—É –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞).\n" +
                            "–¢–≤–æ–π –∫–æ–¥ (–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è —Ç—ã–∫–æ–º) - `%s`",
                    googleFormLink, judgeCodes.get(judge)
            );

            BotUtils.sendMessage(judge, messageText, bot);
        }

        BotUtils.sendMessage(chatId, "–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—É–¥—å—è–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", bot);
        selectedJudges.remove(chatId);
        waitingForGoogleFormLink.put(chatId, false);
    }

    private boolean isContestActive() {
        LocalDate today = LocalDate.now();
        return contestStartDate != null && contestEndDate != null &&
                !today.isBefore(contestStartDate) && !today.isAfter(contestEndDate);
    }

    private void setContestPeriod(String startDateStr, String endDateStr, long chatId) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
        try {
            contestStartDate = LocalDate.parse(startDateStr, formatter);
            contestEndDate = LocalDate.parse(endDateStr, formatter);
            BotUtils.sendMessage(chatId, "–ü–µ—Ä–∏–æ–¥ –ø—Ä–∏—ë–º–∞ —Ä–∞–±–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å " + contestStartDate + " –ø–æ " + contestEndDate, bot);
        } catch (DateTimeParseException e) {
            BotUtils.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–¥.–º–º.–≥–≥–≥–≥.", bot);
        }
    }

    private void sendMainMenu(long chatId) {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ù–∞–π—Ç–∏ –≥–∞–π–¥");
        row1.add("–ö–æ–Ω–∫—É—Ä—Å");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤");
        row2.add("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≥–∞–∑–µ—Ç—ã");

        keyboard.add(row1);
        keyboard.add(row2);

        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:");
        message.setReplyMarkup(keyboardMarkup);

        try {
            bot.execute(message);
        } catch (TelegramApiException e) {
            BotUtils.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: " + e.getMessage());
        }
    }

    private String getResponseByKeyword(String text) {
        switch (text.toLowerCase()) {
            case "java":
                return "–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ Java: https://docs.oracle.com/javase/8/docs/api/";
            case "spring":
                return "–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ Spring: https://spring.io/projects/spring-framework";
            default:
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞.";
        }
    }
}